import fs from 'fs';
import path from 'path';

/**
 * Generate a Docusaurus sidebar configuration file for the repository
 * @param repoSlug The repository slug
 * @param documentedFiles Array of documented files
 * @param repoDir The repository directory
 */
export async function generateSidebar(repoSlug: string, documentedFiles: string[], repoDir: string): Promise<void> {
  // Create the sidebar directory if it doesn't exist
  const sidebarDir = path.join(process.cwd(), 'docs');
  if (!fs.existsSync(sidebarDir)) {
    fs.mkdirSync(sidebarDir, { recursive: true });
  }
  
  // Create the sidebar.js file
  const sidebarPath = path.join(sidebarDir, 'sidebars.js');
  
  // Group files by directory
  const filesByDirectory: Record<string, string[]> = {};
  
  documentedFiles.forEach(file => {
    // Ensure file has .md extension for sidebar
    const fileWithExtension = file.endsWith('.md') ? file : `${file}.md`;
    
    const dir = fileWithExtension.includes('/') 
      ? fileWithExtension.substring(0, fileWithExtension.lastIndexOf('/')) 
      : '';
    
    if (!filesByDirectory[dir]) {
      filesByDirectory[dir] = [];
    }
    
    filesByDirectory[dir].push(fileWithExtension);
  });
  
  // Create sidebar items
  const sidebarItems: any[] = [];
  
  // Add index file first if it exists
  if (fs.existsSync(path.join(repoDir, 'index.md'))) {
    sidebarItems.push({
      type: 'doc',
      id: 'index',
      label: 'Overview'
    });
  }
  
  // Add categories for each directory
  for (const dir in filesByDirectory) {
    if (dir === '') {
      // Add root files directly
      filesByDirectory[dir].forEach(file => {
        if (file !== 'index.md') {
          const fileName = path.basename(file, '.md');
          sidebarItems.push({
            type: 'doc',
            id: fileName,
            label: fileName.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase())
          });
        }
      });
    } else {
      // Add directory as a category
      const categoryName = dir.split('/').pop() || dir;
      const categoryItems = filesByDirectory[dir].map(file => {
        const fileName = path.basename(file, '.md');
        const fullPath = `${dir}/${fileName}`.replace(/^\//, '');
        
        return {
          type: 'doc',
          id: fullPath,
          label: fileName.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase())
        };
      });
      
      if (categoryItems.length > 0) {
        sidebarItems.push({
          type: 'category',
          label: categoryName.replace(/-/g, ' ').replace(/\b\w/g, c => c.toUpperCase()),
          items: categoryItems
        });
      }
    }
  }
  
  // Create the sidebar configuration
  const sidebarConfig = {
    docs: sidebarItems
  };
  
  // Write the sidebar configuration to the file
  const sidebarContent = `/**
 * Auto-generated sidebar configuration
 * Generated by documentation generation process
 */

module.exports = ${JSON.stringify(sidebarConfig, null, 2)};
`;
  
  fs.writeFileSync(sidebarPath, sidebarContent, 'utf8');
  
  // Also create a repository-specific sidebar file in the repository directory
  const repoSidebarPath = path.join(repoDir, 'sidebar.js');
  fs.writeFileSync(repoSidebarPath, sidebarContent, 'utf8');
  
  console.log(`Generated sidebar configuration for ${repoSlug}`);
}
