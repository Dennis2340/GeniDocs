import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

/**
 * Ensures the Docusaurus configuration is properly set up
 * @param repoSlug The repository slug
 */
export async function ensureDocusaurusConfig(repoSlug: string): Promise<void> {
  try {
    const docsDir = path.join(process.cwd(), 'docs');
    const configPath = path.join(docsDir, 'docusaurus.config.js');
    const sidebarPath = path.join(docsDir, 'sidebars.js');
    
    // Check if the docs directory exists
    if (!fs.existsSync(docsDir)) {
      console.log('Docs directory not found. Creating it...');
      fs.mkdirSync(docsDir, { recursive: true });
    }
    
    // Update docusaurus.config.js
    if (fs.existsSync(configPath)) {
      let configContent = fs.readFileSync(configPath, 'utf8');
      
      // Update the baseUrl to include the repository slug
      configContent = configContent.replace(
        /baseUrl: "\/"/,
        `baseUrl: "/"`
      );
      
      // Update the routeBasePath to be empty string to serve docs at root
      configContent = configContent.replace(
        /routeBasePath: "\/"/,
        `routeBasePath: "/"`
      );
      
      // Set onBrokenLinks to warn instead of throw to prevent build failures
      configContent = configContent.replace(
        /onBrokenLinks: "throw"/,
        `onBrokenLinks: "warn"`
      );
      
      // Write the updated config back to the file
      fs.writeFileSync(configPath, configContent, 'utf8');
      console.log('Updated Docusaurus configuration');
    }
    
    // Update sidebars.js to include the repository slug
    if (fs.existsSync(sidebarPath)) {
      const sidebarContent = `/**
 * Auto-generated sidebar configuration
 * Generated by API documentation process
 */

module.exports = {
  docs: [
    {
      type: "autogenerated",
      dirName: ".", // '.' means the current docs folder
    },
  ],
};
`;
      fs.writeFileSync(sidebarPath, sidebarContent, 'utf8');
      console.log('Updated Docusaurus sidebar configuration');
    }
    
    // Create a direct link to the repository docs in the Docusaurus docs directory
    const repoDocsDir = path.join(docsDir, 'docs', repoSlug);
    if (!fs.existsSync(repoDocsDir)) {
      fs.mkdirSync(repoDocsDir, { recursive: true });
      console.log(`Created docs directory for ${repoSlug}`);
    }
    
    // Create a default index.md file if it doesn't exist
    const indexPath = path.join(repoDocsDir, 'index.md');
    if (!fs.existsSync(indexPath)) {
      const indexContent = `---
id: "index"
title: "${repoSlug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Documentation"
sidebar_position: 1
---

# ${repoSlug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Documentation

Welcome to the documentation for ${repoSlug.replace(/-/g, '/')}. This documentation was generated using GeniDocs, an AI-powered documentation generator.
`;
      fs.writeFileSync(indexPath, indexContent, 'utf8');
      console.log(`Created default index.md for ${repoSlug}`);
    }
    
    return Promise.resolve();
  } catch (error) {
    console.error('Error ensuring Docusaurus configuration:', error);
    return Promise.reject(error);
  }
}

/**
 * Starts the Docusaurus server
 */
export async function startDocusaurusServer(): Promise<void> {
  try {
    const docsDir = path.join(process.cwd(), 'docs');
    
    // Check if the docs directory exists
    if (!fs.existsSync(docsDir)) {
      console.log('Docs directory not found. Creating it...');
      fs.mkdirSync(docsDir, { recursive: true });
    }
    
    // Check if package.json exists in the docs directory
    const packageJsonPath = path.join(docsDir, 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
      console.log('package.json not found in docs directory. Creating a basic Docusaurus setup...');
      await execAsync('npx @docusaurus/init@latest init docs classic', { cwd: process.cwd() });
    }
    
    // Start the Docusaurus server
    console.log('Starting Docusaurus server...');
    await execAsync('npm run docs:start', { cwd: process.cwd() });
    
    return Promise.resolve();
  } catch (error) {
    console.error('Error starting Docusaurus server:', error);
    return Promise.reject(error);
  }
}
