"use client";

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';

export default function GenerateDocs() {
  const params = useParams();
  const repoId = params?.repoId as string;
  const [status, setStatus] = useState('Initializing...');
  const [isGenerating, setIsGenerating] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<any>(null);
  const [logs, setLogs] = useState<string[]>([]);
  const [repoDetails, setRepoDetails] = useState<any>(null);
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState('initializing');
  
  // Define the type for generation steps
  interface GenerationStep {
    id: string;
    label: string;
    completed: boolean;
    current: boolean;
    error?: boolean;
  }
  
  const [generationSteps, setGenerationSteps] = useState<GenerationStep[]>([
    { id: 'initializing', label: 'Initializing', completed: false, current: true },
    { id: 'analyzing', label: 'Analyzing Repository', completed: false, current: false },
    { id: 'generating', label: 'Generating Documentation', completed: false, current: false },
    { id: 'finalizing', label: 'Finalizing', completed: false, current: false },
    { id: 'completed', label: 'Completed', completed: false, current: false }
  ]);
  const router = useRouter();

  // Fetch repository details
  useEffect(() => {
    if (!repoId) return;

    async function fetchRepoDetails() {
      try {
        const response = await fetch(`/api/repos/${repoId}`);
        if (response.ok) {
          const data = await response.json();
          setRepoDetails(data);
        }
      } catch (err) {
        console.error('Error fetching repository details:', err);
      }
    }

    fetchRepoDetails();
  }, [repoId]);

  useEffect(() => {
    // Ensure repoId is available before proceeding
    if (!repoId) return;
    
    async function generateDocs() {
      try {
        setIsGenerating(true);
        setError(null);
        setLogs([]);
        
        const response = await fetch(`/api/generate?repoId=${repoId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to generate documentation');
        }
        
        const data = await response.json();
        setResult(data);
        setStatus('Documentation generation started. This may take a few minutes...');
        
        // Poll for status updates and logs
        const statusCheckInterval = setInterval(async () => {
          try {
            if (!data.documentationId) {
              console.error('Missing documentationId');
              clearInterval(statusCheckInterval);
              setError('Missing documentation ID. Please try again.');
              setIsGenerating(false);
              return;
            }
            
            // Check status
            const statusResponse = await fetch(`/api/generate/status?documentationId=${data.documentationId}`);
            if (statusResponse.ok) {
              const statusData = await statusResponse.json();
              
              // Update logs if available
              if (statusData.logs && Array.isArray(statusData.logs)) {
                setLogs(statusData.logs);
              }
              
              if (statusData.status === 'COMPLETED') {
                setStatus('Documentation generated successfully!');
                setIsGenerating(false);
                clearInterval(statusCheckInterval);
                setProgress(100);
                
                // Update steps
                setGenerationSteps(prev => prev.map(step => ({
                  ...step,
                  completed: true,
                  current: step.id === 'completed'
                })));
                setCurrentStep('completed');
                
                // Run standardization scripts
                try {
                  await fetch('/api/docs/standardize', { method: 'POST' });
                } catch (err) {
                  console.error('Error running standardization scripts:', err);
                }
                
                // Redirect to docs page after a short delay
                setTimeout(() => {
                  router.push(`/docs/${data.repo}`);
                }, 2000);
              } else if (statusData.status === 'FAILED') {
                setStatus('Documentation generation failed.');
                setIsGenerating(false);
                setError('There was an error generating the documentation. Please try again.');
                clearInterval(statusCheckInterval);
                
                // Update steps to show failure
                setGenerationSteps(prev => prev.map(step => ({
                  ...step,
                  completed: step.current ? false : step.completed,
                  error: step.current ? true : false,
                  current: step.current
                })));
              } else {
                // Update progress based on status
                let newProgress = 0;
                let newStep = 'initializing';
                
                if (statusData.status === 'ANALYZING') {
                  newProgress = 25;
                  newStep = 'analyzing';
                } else if (statusData.status === 'GENERATING') {
                  newProgress = 50;
                  newStep = 'generating';
                } else if (statusData.status === 'FINALIZING') {
                  newProgress = 75;
                  newStep = 'finalizing';
                }
                
                setProgress(newProgress);
                setStatus(`Status: ${statusData.status}`);
                
                // Update current step
                if (newStep !== currentStep) {
                  setCurrentStep(newStep);
                  setGenerationSteps(prev => prev.map(step => ({
                    ...step,
                    completed: step.id === currentStep ? true : step.completed,
                    current: step.id === newStep
                  })));
                }
              }
            } else {
              console.error('Error response from status endpoint:', await statusResponse.text());
            }
          } catch (err) {
            console.error('Error checking status:', err);
          }
        }, 5000); // Check every 5 seconds
        
        // Clean up interval on component unmount
        return () => clearInterval(statusCheckInterval);
        
      } catch (err: any) {
        console.error('Error generating documentation:', err);
        setError(err.message || 'An error occurred while generating documentation');
        setIsGenerating(false);
        setStatus('Failed');
      }
    }
    
    generateDocs();
  }, [repoId, router, currentStep]);

  return (
    <div className="min-h-screen bg-gray-50 text-gray-900">
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row md:items-center justify-between mb-8 pb-4 border-b border-gray-200">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">Generate Documentation</h1>
            <p className="text-gray-600">
              {repoDetails ? (
                <>Generating documentation for <span className="font-medium">{repoDetails.name}</span></>
              ) : (
                'Processing repository...'  
              )}
            </p>
          </div>
          <Link 
            href="/dashboard"
            className="mt-4 md:mt-0 bg-white text-gray-700 hover:bg-gray-100 px-4 py-2 rounded-lg border border-gray-300 shadow-sm transition-colors flex items-center gap-2"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
            </svg>
            Back to Dashboard
          </Link>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-md p-8 border border-gray-200">
              {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
                  <div className="flex items-start">
                    <svg className="h-5 w-5 text-red-500 mt-0.5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                    </svg>
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-red-800">Error</h3>
                      <div className="mt-1 text-sm text-red-700">{error}</div>
                    </div>
                  </div>
                </div>
              )}
              
              <div className="text-center py-8">
                {isGenerating ? (
                  <>
                    <div className="relative">
                      <div className="w-24 h-24 rounded-full bg-blue-100 mx-auto flex items-center justify-center">
                        <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent"></div>
                      </div>
                      <div className="absolute inset-0 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                    </div>
                    <h2 className="text-2xl font-semibold text-gray-900 mt-6 mb-2">{status}</h2>
                    <p className="text-gray-600 text-base max-w-lg mx-auto">
                      We're analyzing the repository and generating comprehensive documentation.
                      This process may take a few minutes depending on the size of the codebase.
                    </p>
                    
                    {/* Helpful tips during generation */}
                    <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4 max-w-lg mx-auto text-left">
                      <h3 className="text-sm font-medium text-blue-800 mb-2">While you wait</h3>
                      <ul className="text-sm text-blue-700 space-y-2">
                        <li className="flex items-start">
                          <svg className="h-5 w-5 text-blue-500 mr-1.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <span>Documentation generation analyzes your code structure, comments, and dependencies</span>
                        </li>
                        <li className="flex items-start">
                          <svg className="h-5 w-5 text-blue-500 mr-1.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <span>Well-commented code will result in more detailed documentation</span>
                        </li>
                        <li className="flex items-start">
                          <svg className="h-5 w-5 text-blue-500 mr-1.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                          <span>You'll be redirected to your documentation when complete</span>
                        </li>
                      </ul>
                    </div>
                    
                    {/* Progress Indicators */}
                    <div className="mt-8 max-w-md mx-auto">
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700">Documentation Generation</span>
                        <span className="text-sm text-gray-500">{progress}% Complete</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2.5">
                        <div 
                          className={`bg-blue-600 h-2.5 rounded-full ${progress < 100 ? 'animate-pulse' : ''}`} 
                          style={{width: `${progress}%`}}
                        ></div>
                      </div>
                      
                      {/* Step Indicators */}
                      <div className="mt-8">
                        <div className="space-y-4">
                          {generationSteps.map((step, index) => (
                            <div key={step.id} className="flex items-center">
                              <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center
                                ${step.completed ? 'bg-green-100 text-green-600' : 
                                  step.error ? 'bg-red-100 text-red-600' :
                                  step.current ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-400'}`}>
                                {step.completed ? (
                                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                  </svg>
                                ) : step.error ? (
                                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                  </svg>
                                ) : step.current ? (
                                  <div className="h-3 w-3 bg-blue-600 rounded-full animate-pulse"></div>
                                ) : (
                                  <span className="text-xs">{index + 1}</span>
                                )}
                              </div>
                              <div className="ml-3">
                                <p className={`text-sm font-medium ${step.current ? 'text-blue-600' : step.completed ? 'text-green-600' : step.error ? 'text-red-600' : 'text-gray-500'}`}>
                                  {step.label}
                                </p>
                              </div>
                              {index < generationSteps.length - 1 && (
                                <div className="ml-4 flex-1 min-w-0">
                                  <div className={`h-0.5 ${step.completed ? 'bg-green-400' : 'bg-gray-200'}`}></div>
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </>
                ) : error ? (
                  <div className="text-center py-12">
                    <div className="bg-red-100 rounded-full h-24 w-24 flex items-center justify-center mx-auto mb-6">
                      <svg className="h-12 w-12 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                      </svg>
                    </div>
                    <h2 className="text-2xl font-semibold text-gray-900 mb-2">Documentation Generation Failed</h2>
                    <p className="text-red-600 max-w-md mx-auto mb-4">{error}</p>
                    <p className="text-gray-600 max-w-md mx-auto mb-8">
                      There was an issue generating documentation for this repository. Please check the logs for more details.
                    </p>
                    <div className="flex justify-center space-x-4">
                      <button 
                        onClick={() => router.push('/dashboard')} 
                        className="bg-white border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                      >
                        Back to Dashboard
                      </button>
                      <button 
                        onClick={() => window.location.reload()} 
                        className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        Try Again
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <div className="bg-green-100 rounded-full h-24 w-24 flex items-center justify-center mx-auto mb-6">
                      <svg className="h-12 w-12 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <h2 className="text-2xl font-semibold text-gray-900 mb-2">{status}</h2>
                    <p className="text-gray-600 max-w-md mx-auto mb-4">
                      Your documentation has been successfully generated. You will be redirected to view it shortly.
                    </p>
                    <div className="animate-pulse flex justify-center items-center text-blue-600">
                      <svg className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 9l3 3m0 0l-3 3m3-3H8m13 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <span>Redirecting to documentation...</span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* Sidebar - Logs */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-md border border-gray-200 overflow-hidden">
              <div className="p-4 bg-gray-50 border-b border-gray-200">
                <h3 className="text-lg font-medium text-gray-900">Generation Logs</h3>
              </div>
              <div className="p-4 max-h-[500px] overflow-y-auto">
                {logs.length > 0 ? (
                  <div className="space-y-2 font-mono text-sm">
                    {logs.map((log, index) => {
                      // Check if log has a timestamp prefix [HH:MM:SS]
                      const hasTimestamp = /^\[\d{1,2}:\d{1,2}:\d{1,2}\]/.test(log);
                      const timestamp = hasTimestamp ? log.match(/^\[(.*?)\]/)?.[0] : `[${new Date().toLocaleTimeString()}]`;
                      const message = hasTimestamp ? log.replace(/^\[.*?\]\s*/, '') : log;
                      
                      // Determine message type for styling
                      const isError = /error|fail|exception/i.test(message);
                      const isWarning = /warn|caution/i.test(message);
                      const isSuccess = /success|complete|done/i.test(message);
                      
                      let messageClass = 'text-gray-800';
                      if (isError) messageClass = 'text-red-600';
                      if (isWarning) messageClass = 'text-amber-600';
                      if (isSuccess) messageClass = 'text-green-600';
                      
                      return (
                        <div key={index} className="py-1 border-b border-gray-100 last:border-0">
                          <span className="text-gray-500">{timestamp}</span> 
                          <span className={messageClass}>{message}</span>
                          {isError && (
                            <div className="mt-1 ml-6 text-xs text-red-500 bg-red-50 p-1 rounded">
                              Tip: Check repository permissions and structure if you encounter errors
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-300 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M8 12h.01M12 12h.01M16 12h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p>No logs available yet</p>
                    <p className="text-sm mt-1">Logs will appear here as the documentation is generated</p>
                  </div>
                )}
              </div>
            </div>
            
            {/* Repository Info */}
            {repoDetails && (
              <div className="bg-white rounded-xl shadow-md border border-gray-200 mt-6 p-4">
                <h3 className="text-lg font-medium text-gray-900 mb-3">Repository Details</h3>
                <div className="space-y-3">
                  <div>
                    <div className="text-sm text-gray-500">Name</div>
                    <div className="font-medium">{repoDetails.name}</div>
                  </div>
                  {repoDetails.description && (
                    <div>
                      <div className="text-sm text-gray-500">Description</div>
                      <div>{repoDetails.description}</div>
                    </div>
                  )}
                  {repoDetails.language && (
                    <div>
                      <div className="text-sm text-gray-500">Primary Language</div>
                      <div className="flex items-center">
                        <span className="w-2.5 h-2.5 rounded-full bg-blue-500 mr-1.5"></span>
                        {repoDetails.language}
                      </div>
                    </div>
                  )}
                  <div>
                    <a 
                      href={repoDetails.githubUrl || '#'} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 inline-flex items-center gap-1 mt-2"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                        <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                      </svg>
                      View on GitHub
                    </a>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
