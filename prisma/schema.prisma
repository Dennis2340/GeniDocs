datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String        @id @default(cuid())
    name           String?
    email          String?       @unique
    emailVerified  DateTime?
    image          String?
    githubId       String?       @unique
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
    accounts       Account[]
    sessions       Session[]
}

model Organization {
    id           String       @id @default(cuid())
    name         String
    slug         String       @unique
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    users        User[]
    repositories Repository[]
}

model Repository {
    id             String       @id @default(cuid())
    name           String
    fullName       String
    description    String?
    githubUrl      String
    lastIndexedAt  DateTime?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
